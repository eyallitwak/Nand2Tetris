// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //decoding
    Or(a=instruction[15] , b=false , out=isCop );
    Not(in=isCop , out=isAop );
    And(a=instruction[3] , b=isCop , out=writeM );
    And(a=instruction[4] , b=isCop , out=writeD );
    And(a=instruction[5] , b=isCop , out=writeA );
    Or(a=writeA , b=isAop , out=loadA );

    //A register
    Mux16(a=ALUout , b=instruction , sel=isAop , out=Ain );
    ARegister(in=Ain , load=loadA , out=Aout , out[0..14]=addressM );

    //D register
    DRegister(in=ALUout , load=writeD , out=Dout );

    //ALU
    Mux16(a=Aout , b=inM , sel=instruction[12] , out=ALUinY );
    ALU(x=Dout , y=ALUinY , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=ALUout , out=outM , zr=zr , ng=ng );


    //PC & jump handling
    Not(in=ng , out=nonNegative );
    Not(in=zr , out=nonZero );
    And(a=nonNegative , b=nonZero , out=positive );
    And(a=instruction[0] , b=positive , out=JGT );
    And(a=instruction[1] , b=zr , out=JEQ );
    And(a=instruction[2] , b=ng , out=JLT );
    Or(a=JGT , b=JEQ , out=JGE );
    Or(a=JGE , b=JLT , out=toJump );
    And(a=toJump , b=isCop , out=loadPC );
    Not(in=loadPC , out=incPC );
    PC(in=Aout , load=loadPC , inc=incPC , reset=reset , out[0..14]=pc );    
}