class Game {
    field Player player; 
    field int direction; // player's current direction: 
                         // 1=up, 2=down, 3=left, 4=right
    field SpeedBall ball;
    // used in calculating the ball's bounce
    field int wall;
    field int lastWall;
    
    field boolean exit;
    field int score;

/** Constructs a new game. */
    constructor Game new(int Ax, int Ay, int Adestx) {
        // player spawns at (0, 0) with size 30 px, and moving downwards
        let player = Player.new(0, 0, 30);
        let direction = 0;

        // ball gets starting coords and destination from the random seed
        let ball = SpeedBall.new(Ax, Ay, 0, 511, 0, 229);
        do ball.setDestination(Adestx, 0);
        do Screen.drawRectangle(0, 238, 511, 240);
        do Output.moveCursor(22, 0);
        do Output.printString("Score: 0");

        let exit = false;
        let score = 0;
        let wall = 0;
        let lastWall = 0;
        return this;
    }

/** Disposes this game. */
    method void dispose() {
        do player.dispose();
        do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

/** Moves the player in the current direction. */
    method void movePlayer() {
        if (direction = 1) { do player.moveUp(); }
        if (direction = 2) { do player.moveDown(); }
        if (direction = 3) { do player.moveLeft(); }
        if (direction = 4) { do player.moveRight(); }
        let exit = checkCollision();
        do Sys.wait(5); 
        return;
    }

/** Runs the game: handles the user's inputs and moves the player 
    and ball appropriately. terminates when player loses or forfeits.
 */
    method void run() {
        var char key;  // the key currently pressed by the user
        // var boolean exit;
        // let exit = false;
      
        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let exit = checkCollision();
                let key = Keyboard.keyPressed();
                do movePlayer();
                do moveBall();
            }
           
            if (key = 140)  { let exit = true; }// escape key

            if ((key > 129) & (key < 134)) {
                if (key = 131) { let direction = 1; } // up arrow
                if (key = 133) { let direction = 2; } // down arrow
                if (key = 130) { let direction = 3; } // left arrow
                if (key = 132) { let direction = 4; } // right arrow
            } 

        // waits for the key to be released
            while ((~(key = 0)) & (~exit)) {
                let exit = checkCollision();
                let key = Keyboard.keyPressed();
                do movePlayer();
                do moveBall();
            }
        } // end of while loop

        if (exit) {
            do Output.moveCursor(10, 27);
            do Output.printString("--YOU DIED--");
        }

        return;
   }

/** Moves the ball and handles collision with walls.
    Also increases score each time the ball touches a wall.
*/
    method void moveBall() {
        var int bouncingDirection, pLeft, pRight, bLeft, bRight;

        let wall = ball.move();
        
        if ((wall > 0) & (~(wall = lastWall))) {
            let score = score + 1;
            do Output.moveCursor(22, 7);
            do Output.printInt(score);
            do ball.speedUp();
            
            let lastWall = wall;
            let bouncingDirection = 0;
            let bLeft = ball.getLeft();
            let bRight = ball.getRight();

            let pLeft = player.getLeft();
            let pRight = player.getRight();

            if (wall = 4) {
                if (bRight < (pLeft + 10)) { let bouncingDirection = -1; }
                else {
                    if (bLeft > (pRight + 10)) { let bouncingDirection = 1; }
                }
            } 

            do ball.bounce(bouncingDirection);
        }
       
        return;
    }

/** Checks whether the player is currently, or in the next movement, 
    will collide with the ball.
*/
    method boolean checkCollision() {
        var int currentPlayerUp, currentPlayerDown, currentPlayerLeft, currentPlayerRight;
        var int nextPlayerUp, nextPlayerDown, nextPlayerLeft, nextPlayerRight;
        var int currentBallUp, currentBallDown, currentBallLeft, currentBallRight;
        var int nextBallUp, nextBallDown, nextBallLeft, nextBallRight;
        var boolean currentPlayerCurrentBall, currentPlayerNextBall, nextPlayerCurrentBall, nextPlayerNextBall;

        let currentPlayerUp = player.getUp();
        let currentPlayerDown = player.getDown();
        let currentPlayerLeft = player.getLeft();
        let currentPlayerRight = player.getRight();

        let currentBallUp = ball.getUp();
        let currentBallDown = ball.getDown();
        let currentBallLeft = ball.getLeft();
        let currentBallRight = ball.getRight();

        if (direction = 1) { //player moves up
            let nextPlayerUp = currentPlayerUp - 2;
            let nextPlayerDown = currentPlayerDown - 2;
            let nextPlayerLeft = currentPlayerLeft;
            let nextPlayerRight = currentPlayerRight;
        } else {
            if (direction = 2) { //player moves down
                let nextPlayerUp = currentPlayerUp + 2;
                let nextPlayerDown = currentPlayerDown + 2;
                let nextPlayerLeft = currentPlayerLeft;
                let nextPlayerRight = currentPlayerRight;
            } else {
                if ( direction = 3) { //player moves left
                    let nextPlayerUp = currentPlayerUp;
                    let nextPlayerDown = currentPlayerDown;
                    let nextPlayerLeft = currentPlayerLeft - 2;
                    let nextPlayerRight = currentPlayerRight -2;
                } else { //player moves right
                    let nextPlayerUp = currentPlayerUp;
                    let nextPlayerDown = currentPlayerDown;
                    let nextPlayerLeft  = currentPlayerLeft + 2;
                    let nextPlayerRight = currentPlayerRight + 2;
                }
            }
        }
        let nextBallUp = ball.getNewY();
        let nextBallDown = nextBallUp + 5;
        let nextBallLeft = ball.getNewX();
        let nextBallRight = nextBallLeft + 5;

        let currentPlayerCurrentBall = (currentPlayerLeft < currentBallRight) & (currentPlayerRight > currentBallLeft) & (currentPlayerUp < currentBallDown) & (currentPlayerDown > currentBallUp);
        let currentPlayerNextBall = (currentPlayerLeft < nextBallRight) & (currentPlayerRight > nextBallLeft) & (currentPlayerUp < nextBallDown) & (currentPlayerDown > nextBallUp);
        let nextPlayerCurrentBall = (nextPlayerLeft < currentBallRight) & (nextPlayerRight > currentBallLeft) & (nextPlayerUp < currentBallDown) & (nextPlayerDown > currentBallUp);
        let nextPlayerNextBall = (nextPlayerLeft < nextBallRight) & (nextPlayerRight > nextBallLeft) & (nextPlayerUp < nextBallDown) & (nextPlayerDown > nextBallUp);

        return currentPlayerCurrentBall | currentPlayerNextBall | nextPlayerCurrentBall | nextPlayerNextBall;
    }
}
